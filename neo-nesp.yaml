substitutions:
  friendly_name: 'NESP'
  hostname: 'neo-nesp'
  device_name: 'neo_nesp'
  device_description: 'WT32S3-21S ZX2D10GE01R-V4848 rotary switch screen'
  ip: 10.0.80.75

  # Home Assistant entities you want to control with nESP
  climate_entity: climate.climate_control
  zone_1_entity: cover.zone_1_downstairs
  zone_2_entity: cover.zone_2_upstairs

  # Home Assistant weather/info entities
  weather_entity: weather.bom_melbourne
  weather_feels_like_entity: sensor.bom_melbourne_temp_feels_like
  weather_high_entity: sensor.bom_melbourne_temp_max_0
  weather_low_entity: sensor.bom_melbourne_temp_min_0
  weather_rain_chance_entity: sensor.bom_melbourne_rain_chance_0
  zone_1_temperature_entity: sensor.xiaomi_temp_1_temperature
  zone_1_humidity_entity: sensor.xiaomi_temp_1_humidity
  zone_2_temperature_entity: sensor.xiaomi_temp_2_temperature
  zone_2_humidity_entity: sensor.xiaomi_temp_2_humidity

external_components:
  - source: github://pr#7472
    components: [ lvgl ]
  - source:
      type: git
      url: https://github.com/esphome/esphome
      ref: dev
    components: [ st7701s ]

esphome:
  name: ${hostname}
  name_add_mac_suffix: true
  friendly_name: ${friendly_name}
  comment: ${device_description}
  platformio_options:
    board_build.flash_mode: dio
    board_build.arduino.memory_type: qio_opi
  on_boot:
    - light.turn_on:
        id: backlight
        brightness: 0.7
esp32:
  board: esp32-s3-devkitc-1
  flash_size: 16MB
  framework:
    type: esp-idf
    version: 5.3.1
    platform_version: 6.8.1
    sdkconfig_options:
      CONFIG_ESPTOOLPY_FLASHSIZE_16MB: y
      CONFIG_ESP32S3_DEFAULT_CPU_FREQ_240: y
      CONFIG_ESP32S3_DATA_CACHE_64KB: y
      CONFIG_SPIRAM_FETCH_INSTRUCTIONS: y
      CONFIG_SPIRAM_RODATA: y
psram:
  mode: octal
  speed: 80MHz

debug:
  update_interval: 60s

<<: !include _common.yaml

output:
  ### DISPLAY BACKLIGHT
  - platform: ledc
    id: display_led
    pin: 38
    zero_means_zero: true

light:
  - platform: monochromatic
    id: backlight
    output: display_led
    name: Backlight
    icon: mdi:brightness-percent
    default_transition_length: 500ms
    restore_mode: ALWAYS_ON

  ### RGB RING LIGHT
  - platform: esp32_rmt_led_strip
    name: RGB LED
    id: rgb_ring
    pin: 4
    num_leds: 13
    rmt_channel: 0
    rgb_order: GRB
    chipset: WS2812

switch:
  ### VIBRATION MOTOR
  - platform: gpio
    id: vibration
    name: Vibration Motor
    icon: mdi:vibrate
    internal: true
    pin: 7

  ### DISPLAY ANTI BURN-IN
  - platform: template
    name: Antiburn
    id: switch_antiburn
    icon: mdi:television-shimmer
    optimistic: true
    internal: true
    turn_on_action:
      - logger.log: "Starting Antiburn"
      - light.turn_off: backlight
      - if:
          condition: lvgl.is_paused
          then:
            - lvgl.resume:
            - lvgl.widget.redraw:
            - delay: 1s
      - lvgl.pause:
          show_snow: true
    turn_off_action:
      - logger.log: "Stopping Antiburn"
      - if:
          condition: lvgl.is_paused
          then:
            - lvgl.resume:
            - lvgl.widget.redraw:
            - delay: 1s
            - lvgl.pause:
      - light.turn_on: backlight

time:
  - platform: homeassistant
    id: hass_time
    on_time:
      - seconds: 0
        then:
          - script.execute: update_menu_date_label
      - hours: 2,3,4,5
        minutes: 5
        seconds: 0
        then:
          - switch.turn_on: switch_antiburn
      - hours: 2,3,4,5
        minutes: 35
        seconds: 0
        then:
          - switch.turn_off: switch_antiburn

binary_sensor:
  ### CENTRE PUSH BUTTON
  - platform: gpio
    name: Button
    id: push_button
    icon: mdi:circle-outline
    internal: true
    pin:
      number: 3
      mode: INPUT
      inverted: true
      ignore_strapping_warning: true
    on_press: 
      # - script.execute:
      #     id: vibrate
      #     length_ms: 10
      - light.turn_on: backlight
      - if:
          condition: lvgl.is_paused
          then:
            - lvgl.resume:
            - lvgl.widget.redraw:
      - if:
          condition:
            # only when on the main page
            lambda: 'return strcmp(id(active_lvgl_page).c_str(), "main_page") == 0;'
          then:
            - script.execute: goto_menu_page

  - platform: status
    name: Status

button:
- platform: restart
  name: Restart
  disabled_by_default: True

sensor:
  - platform: uptime
    name: Uptime
    disabled_by_default: True

  ### ROTARY ENCODER
  - platform: rotary_encoder
    name: Rotary Encoder
    id: rotary
    icon: mdi:cached
    internal: true
    pin_a:
      number: 6
      inverted: true
      mode: INPUT
    pin_b:
      number: 5
      inverted: true
      mode: INPUT
    on_value:
      - light.turn_on: backlight
      - if:
          condition:
            # turn ON when when on main page and OFF
            lambda: 'return strcmp(id(active_lvgl_page).c_str(), "main_page") == 0 && strcmp(id(hvac_mode).state.c_str(), "off") == 0;'
          then:
            - homeassistant.action:
                action: climate.turn_on
                data:
                  entity_id: ${climate_entity}
      - if:
          condition: lvgl.is_paused
          then:
            - lvgl.resume:
            - lvgl.widget.redraw:
    on_clockwise:
      - if:
          condition:
            # set temp++ when on main page and not OFF or FAN
            lambda: 'return strcmp(id(active_lvgl_page).c_str(), "main_page") == 0 && strcmp(id(hvac_mode).state.c_str(), "off") != 0 && strcmp(id(hvac_mode).state.c_str(), "fan_only") != 0;'
          then:
            - homeassistant.action:
                action: climate.set_temperature
                data:
                  entity_id: ${climate_entity}
                  temperature: !lambda return id(set_temperature).state + 0.5;
    on_anticlockwise:
      - if:
          condition:
            # set temp-- when on main page and not OFF or FAN
            lambda: 'return strcmp(id(active_lvgl_page).c_str(), "main_page") == 0 && strcmp(id(hvac_mode).state.c_str(), "off") != 0 && strcmp(id(hvac_mode).state.c_str(), "fan_only") != 0;'
          then:
            - homeassistant.action:
                action: climate.set_temperature
                data:
                  entity_id: ${climate_entity}
                  temperature: !lambda return id(set_temperature).state - 0.5;

  ### HASS - HVAC SET TEMP
  - platform: homeassistant
    entity_id: ${climate_entity}
    id: set_temperature
    attribute: temperature
    internal: true
    on_value:
      - lvgl.indicator.update:
          id: set_temp_needle
          value: !lambda return x * 10;
      - lvgl.indicator.update:
          id: diff_temp_arc
          start_value: !lambda |-
            return id(set_temperature).state < id(current_temperature).state ? id(set_temperature).state * 10 : id(current_temperature).state * 10;
          end_value: !lambda |-
            return id(set_temperature).state < id(current_temperature).state ? id(current_temperature).state * 10 : id(set_temperature).state * 10;
      - lvgl.roller.update:
          id: set_temp_roller
          selected_index: !lambda return 2 * (x - 16);  # returns index of roller value

  ### HASS - HVAC CURRENT TEMP
  - platform: homeassistant
    entity_id: ${climate_entity}
    id: current_temperature
    attribute: current_temperature
    internal: true
    on_value:
      - lvgl.arc.update:
          id: current_temp_arc
          value: !lambda return x * 10;
      - lvgl.indicator.update:
          id: diff_temp_arc
          start_value: !lambda |-
            return id(set_temperature).state < id(current_temperature).state ? id(set_temperature).state * 10 : id(current_temperature).state * 10;
          end_value: !lambda |-
            return id(set_temperature).state < id(current_temperature).state ? id(current_temperature).state * 10 : id(set_temperature).state * 10;
      - lvgl.label.update:
          id: current_temp_label
          text:
            format: "%.1f째C"
            args: [ 'round(x * 10) / 10' ]

  ### HASS - HVAC CURRENT HUMIDITY
  - platform: homeassistant
    entity_id: ${climate_entity}
    id: current_humidity
    attribute: current_humidity
    internal: true

  ### HASS - BoM temperature
  - platform: homeassistant
    entity_id: ${weather_entity}
    id: bom_temp
    attribute: temperature
    internal: true
    on_value:
      - lvgl.label.update:
          id: weather_temp_label
          text:
            format: "%.0f째C"
            args: [ 'round(x)' ]
      - lvgl.label.update:
          id: menu_weather_label
          text: 
            format: "%.0f째C"
            args: [ 'round(id(bom_temp).state)']

  ### HASS - BoM feels like temperature
  - platform: homeassistant
    entity_id: ${weather_feels_like_entity}
    id: bom_feels_like
    internal: true
    on_value:
      - lvgl.label.update:
          id: weather_feels_like_label
          text:
            format: "Feels like %.0f째C"
            args: [ 'round(x)' ]

  ### HASS - BoM forecast high temp
  - platform: homeassistant
    entity_id: ${weather_high_entity}
    id: bom_high_temp
    internal: true
    on_value:
      - script.execute: update_weather_forecast_label

  ### HASS - BoM forecast low temp
  - platform: homeassistant
    entity_id: ${weather_low_entity}
    id: bom_low_temp
    internal: true
    on_value:
      - script.execute: update_weather_forecast_label

  ### HASS - BoM forecast rain change
  - platform: homeassistant
    entity_id: ${weather_rain_chance_entity}
    id: bom_rain_chance
    internal: true
    on_value:
      - script.execute: update_weather_forecast_label

  ### HASS - Zone 1 temperature
  - platform: homeassistant
    entity_id: ${zone_1_temperature_entity}
    id: zone_1_temp
    internal: true
    on_value:
      - script.execute: update_menu_zone_temp_label

  ### HASS - Zone 1 humidity
  - platform: homeassistant
    entity_id: ${zone_1_humidity_entity}
    id: zone_1_humidity
    internal: true
    on_value:
      - script.execute: update_menu_zone_temp_label

  ### HASS - Zone 2 temperature
  - platform: homeassistant
    entity_id: ${zone_2_temperature_entity}
    id: zone_2_temp
    internal: true
    on_value:
      - script.execute: update_menu_zone_temp_label

  ### HASS - Zone 2 humidity
  - platform: homeassistant
    entity_id: ${zone_2_humidity_entity}
    id: zone_2_humidity
    internal: true
    on_value:
      - script.execute: update_menu_zone_temp_label

text_sensor:
  ### HASS - HVAC MODE
  - platform: homeassistant
    entity_id: ${climate_entity}
    id: hvac_mode
    internal: true
    on_value:
      - lambda: |-
          if (x.compare("off") == 0) {
            id(set_mode_off).execute();
          } else if (x.compare("heat") == 0) {
            id(set_mode_heat).execute();
          } else if (x.compare("cool") == 0) {
            id(set_mode_cool).execute();
          } else if (x.compare("fan_only") == 0) {
            id(set_mode_fan).execute();
          } else if (x.compare("dry") == 0) {
            id(set_mode_dry).execute();
          } else if (x.compare("heat_cool") == 0) {
            id(set_mode_heat_cool).execute();
          }

  ### HASS - HVAC FAN SPEED
  - platform: homeassistant
    entity_id: ${climate_entity}
    id: fan_mode
    attribute: fan_mode
    internal: true
    on_value:
      - lambda: |-
          if (x.compare("auto") == 0) {
            id(set_fan_auto).execute();
          } else if (x.compare("low") == 0) {
            id(set_fan_low).execute();
          } else if (x.compare("medium") == 0) {
            id(set_fan_medium).execute();
          } else if (x.compare("high") == 0) {
            id(set_fan_high).execute();
          }

  ### HASS - HVAC PRESET
  - platform: homeassistant
    entity_id: ${climate_entity}
    id: preset_mode
    attribute: preset_mode
    internal: true
    on_value:
      - lambda: |-
          if (x.compare("none") == 0) {
            id(set_preset_none).execute();
          } else if (x.compare("eco") == 0) {
            id(set_preset_eco).execute();
          } else if (x.compare("comfort") == 0) {
            id(set_preset_comfort).execute();
          } else if (x.compare("boost") == 0) {
            id(set_preset_boost).execute();
          }

    ### HASS - ZONES
  - platform: homeassistant
    entity_id: ${zone_1_entity}
    id: zone_1
    internal: true
    on_value:
      - lambda: |-
          if (x.compare("open") == 0) {
            id(set_zone_1).execute();
          } else if (x.compare("closed") == 0) {
            id(unset_zone_1).execute();
          }
  - platform: homeassistant
    entity_id: ${zone_2_entity}
    id: zone_2
    internal: true
    on_value:
      - lambda: |-
          if (x.compare("open") == 0) {
            id(set_zone_2).execute();
          } else if (x.compare("closed") == 0) {
            id(unset_zone_2).execute();
          }

  ### HASS - BoM weather
  - platform: homeassistant
    entity_id: ${weather_entity}
    id: bom_weather
    internal: true

  ### HASS - BoM icon
  - platform: homeassistant
    entity_id: ${weather_entity}
    id: bom_icon
    attribute: icon
    internal: true
    on_value:
      - lvgl.label.update:
          id: weather_icon_label
          text: !lambda |-
            if (x.compare("mdi:weather-night") == 0) {
              return "\U000F0594";
            } else if (x.compare("mdi:weather-cloudy") == 0) {
              return "\U000F0590";
            } else if (x.compare("mdi:weather-hurricane") == 0) {
              return "\U000F0898";
            } else if (x.compare("mdi:weather-hazy") == 0) {
              return "\U000F0F30";
            } else if (x.compare("mdi:weather-fog") == 0) {
              return "\U000F0F91";
            } else if (x.compare("mdi:snowflake-melt") == 0) {
              return "\U000F12CB";
            } else if (x.compare("mdi:weather-pouring") == 0) {
              return "\U000F0596";
            } else if (x.compare("mdi:weather-partly-rainy") == 0) {
              return "\U000F0F33";
            } else if (x.compare("mdi:weather-light-showers") == 0) {
              return "\U000F0F33";    // mdi:partly-rainy, mdi:light-showers doesn't exist?
            } else if (x.compare("mdi:weather-sunny") == 0) {
              return "\U000F0599";
            } else if (x.compare("mdi:weather-partly-cloudy") == 0) {
              return "\U000F0595";
            } else if (x.compare("mdi:weather-rainy") == 0) {
              return "\U000F0597";
            } else if (x.compare("mdi:weather-snowy") == 0) {
              return "\U000F0598";
            } else if (x.compare("mdi:weather-lightning") == 0) {
              return "\U000F0593";    // not in BoM integration code last time I checked
            } else if (x.compare("mdi:weather-lightning-rainy") == 0) {
              return "\U000F0593";    // override with mdi:lightning
            } else if (x.compare("mdi:weather-windy") == 0) {
              return "\U000F059D";
            } else if (x.compare("mdi:weather-hail") == 0) {
              return "\U000F0592";    // not in BoM integration code last time I checked
            } else {
              return "";
            }
      - lvgl.label.update:
          id: menu_weather_icon_label
          text: !lambda |-
            if (x.compare("mdi:weather-night") == 0) {
              return "\U000F0594";
            } else if (x.compare("mdi:weather-cloudy") == 0) {
              return "\U000F0590";
            } else if (x.compare("mdi:weather-hurricane") == 0) {
              return "\U000F0898";
            } else if (x.compare("mdi:weather-hazy") == 0) {
              return "\U000F0F30";
            } else if (x.compare("mdi:weather-fog") == 0) {
              return "\U000F0F91";
            } else if (x.compare("mdi:snowflake-melt") == 0) {
              return "\U000F12CB";
            } else if (x.compare("mdi:weather-pouring") == 0) {
              return "\U000F0596";
            } else if (x.compare("mdi:weather-partly-rainy") == 0) {
              return "\U000F0F33";
            } else if (x.compare("mdi:weather-light-showers") == 0) {
              return "\U000F0F33";    // mdi:partly-rainy, mdi:light-showers doesn't exist?
            } else if (x.compare("mdi:weather-sunny") == 0) {
              return "\U000F0599";
            } else if (x.compare("mdi:weather-partly-cloudy") == 0) {
              return "\U000F0595";
            } else if (x.compare("mdi:weather-rainy") == 0) {
              return "\U000F0597";
            } else if (x.compare("mdi:weather-snowy") == 0) {
              return "\U000F0598";
            } else if (x.compare("mdi:weather-lightning") == 0) {
              return "\U000F0593";    // not in BoM integration code last time I checked
            } else if (x.compare("mdi:weather-lightning-rainy") == 0) {
              return "\U000F0593";    // override with mdi:lightning
            } else if (x.compare("mdi:weather-windy") == 0) {
              return "\U000F059D";
            } else if (x.compare("mdi:weather-hail") == 0) {
              return "\U000F0592";    // not in BoM integration code last time I checked
            } else {
              return "";
            }

  - platform: debug
    reset_reason:
      name: Reset Reason
      disabled_by_default: True

spi:
  ### DISPLAY
  clk_pin:
    number: 47
    allow_other_uses: true
  mosi_pin:
    number: 41
    allow_other_uses: true
display:
  - platform: st7701s
    id: screen
    spi_mode: MODE0
    data_rate: 10MHz
    color_order: RGB
    auto_clear_enabled: false
    update_interval: never
    dimensions:
      width: 480
      height: 480
    cs_pin: 21
    de_pin: 39
    vsync_pin: 48
    hsync_pin: 40
    pclk_pin:
      number: 45
      ignore_strapping_warning: true
    pclk_frequency: 15MHz
    pclk_inverted: false
    hsync_pulse_width: 10
    hsync_back_porch:  10
    hsync_front_porch: 10
    vsync_pulse_width:  2
    vsync_back_porch:  12
    vsync_front_porch: 14
    data_pins:
      blue:
        - number: 47                # LCD_D0  = b0
          allow_other_uses: true
        - number: 41                # LCD_D1  = b1
          allow_other_uses: true
        - 0                         # LCD_D2  = b2
        - 42                        # LCD_D3  = b3
        - 14                        # LCD_D4  = b4
      green:
        - 8                         # LCD_D5  = g0
        - 13                        # LCD_D6  = g1
        - 18                        # LCD_D7  = g2
        - 12                        # LCD_D8  = g3
        - 11                        # LCD_D9  = g4
        - 17                        # LCD_D10 = g5
      red:
        - 10                        # LCD_D11 = r0
        - 16                        # LCD_D12 = r1
        - 9                         # LCD_D13 = r2
        - 15                        # LCD_D14 = r3
        - 46                        # LCD_D15 = r4
    init_sequence:
      # Reference: wireless-tag sample code: 
      # https://github.com/wireless-tag-com/ZX2D10GE01R-V4848/blob/master/main/screen.c
      - [0xFF, 0x77, 0x01, 0x00, 0x00, 0x13]    # CMD2_BKSEL (command bank select BK3, BK func enabled)
      - [0xEF, 0x08]
      - [0xFF, 0x77, 0x01, 0x00, 0x00, 0x10]    # CMD2_BKSEL (command bank select BK0, BK func disabled)
      - [0xC0, 0x3B, 0x00]                      # Scan line
      - [0xC1, 0x0B, 0x02]                      # VBP
      - [0xC2, 0x07, 0x02]
      - [0xCC, 0x10]
      - [0xCD, 0x08]                            # RGB format | ?565??? 666??
      - [0xB0, 0x00, 0x11, 0x16, 0x0e, 0x11, 0x06, 0x05, 0x09, 0x08, 0x21, 0x06, 0x13, 0x10, 0x29, 0x31, 0x18]   # IPS | 255 | 251 | 247 down | 239 | 231 | 203 | 175 | 147 | 108 | 80 | 52 | 24 | 16 | 8 down | 4 | 0
      - [0xB1, 0x00, 0x11, 0x16, 0x0e, 0x11, 0x07, 0x05, 0x09, 0x09, 0x21, 0x05, 0x13, 0x11, 0x2a, 0x31, 0x18]   # IPS | 255 | 251 | 247 down | 239 | 231 | 203 | 175 | 147 | 108 | 80 | 52 | 24 | 16 | 8 down | 4 | 0
      - [0xFF, 0x77, 0x01, 0x00, 0x00, 0x11]
      - [0xB0, 0x6d]                            # VOP  3.5375+ *x 0.0125 | 5D
      - [0xB1, 0x37]                            # VCOM amplitude setting
      - [0xB2, 0x81]                            # VGH Voltage setting | 12V
      - [0xB3, 0x80]
      - [0xB5, 0x43]                            # VGL Voltage setting | -8.3V
      - [0xB7, 0x85]
      - [0xB8, 0x20]
      - [0xC1, 0x78]
      - [0xC2, 0x78]
      - [0xD0, 0x88]
      - [0xE0, 0x00, 0x00, 0x02]
      - [0xE1, 0x03, 0xA0, 0x00, 0x00, 0x04, 0xA0, 0x00, 0x00, 0x00, 0x20, 0x20]
      - [0xE2, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00]
      - [0xE3, 0x00, 0x00, 0x11, 0x00]
      - [0xE4, 0x22, 0x00]
      - [0xE5, 0x05, 0xEC, 0xA0, 0xA0, 0x07, 0xEE, 0xA0, 0xA0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00]
      - [0xE6, 0x00, 0x00, 0x11, 0x00]
      - [0xE7, 0x22, 0x00]
      - [0xE8, 0x06, 0xED, 0xA0, 0xA0, 0x08, 0xEF, 0xA0, 0xA0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00]
      - [0xEB, 0x00, 0x00, 0x40, 0x40, 0x00, 0x00, 0x00]
      - [0xED, 0xFF, 0xFF, 0xFF, 0xBA, 0x0A, 0xBF, 0x45, 0xFF, 0xFF, 0x54, 0xFB, 0xA0, 0xAB, 0xFF, 0xFF, 0xFF]
      - [0xEF, 0x10, 0x0D, 0x04, 0x08, 0x3F, 0x1F]
      - [0xFF, 0x77, 0x01, 0x00, 0x00, 0x13]    # CMD2_BKSEL (command bank select BK3, BK func enabled)
      - [0xEF, 0x08]
      - [0xFF, 0x77, 0x01, 0x00, 0x00, 0x00]    # CMD2_BKSEL (command bank select BK0, BK func disabled)
      - [0x36, 0x00]                            # MADCTL_CMD (already in esphome ST7701S::write_init_sequence_)
      - [0x3A, 0x66]                            # COLMOD 55/50=16bit(RGB565); 66=18bit(RGB666); 77?????3AH?=24bit(RGB888)
      # - [0x11]                                  # SLEEP_OUT (already in esphome)
      # - delay 120ms
      # - [0x29]                                  # DISPLAY_ON (already in esphome)
      # - delay 20ms
      #

<<: !include _neo-nesp_UI.yaml

